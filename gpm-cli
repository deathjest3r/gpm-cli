#!/usr/bin/env python

# This file is part of the gpm-cli.
#
# Copyright (C) 2013 Death Jester <d3ath.jest3r@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

import sys
import os
import inspect
import argparse
import getpass
import subprocess
import errno
import cPickle as pickle
from requests import ConnectionError
from gmusicapi import Api

class GPM:
    library = []
    api = None
    delimiter = '|'
    sound_dev = 'alsa:device=hw=0.0'

    def __init__(self):
        self.api = self.login(self.load_config())
        self.library = self.open_library()

    def login(self, config):
        # Do the login procedure
        while True:
            try:
                api = Api()
                if api.login(config['login'], config['password'], \
                        perform_upload_auth = False):
                    return api # Succesfully logged in  
                else:
                    print "Sorry, try again."
                    raise KeyError('login')
            except KeyError as e:
                try:
                    if e.args[0] == "login":
                        config['login'] = raw_input("Login: ")
                        config['password'] = getpass.getpass()
                        continue
                    if e.args[0] == "password":
                        config['password'] = getpass.getpass()
                        continue
                    else:
                        break
                except KeyboardInterrupt:
                    sys.exit(0)
            except ConnectionError:
                print("Not able to connect to the Google service, check your"
                        " internet connection...")
                sys.exit(0)

    def open_library(self):
        try:
            # Try to open the local library if it exists
            local_lib = pickle.load(\
                    open(os.path.expanduser("~/.gpm/library.db"), "rb"))
            return local_lib
        except IOError: # Otherwise load the online lib
            online_lib = self.api.get_all_songs()
            
            try:
                os.makedirs(os.path.expanduser("~/.gpm"))
            except OSError as e:
                if e.errno != errno.EEXIST:
                    raise
            
            pickle.dump( online_lib, \
                    open(os.path.expanduser("~/.gpm/library.db"), "wb"))
            return online_lib

    def load_config(self):
        config = dict()
        try:
            with open(os.path.expanduser("~/.gpmrc")) as f:
                lines = f.readlines()
                for line in lines:
                    words = line.split()
                    if words[0] == 'login':
                        config['login'] = words[1]
                    elif words[0] == 'password':
                        config['password'] = words[1]
        except IOError:
            pass
        return config
  
    def load_plugins(self, plugins):
        plugin_folder = os.path.realpath(os.path.abspath(os.path.join(
                os.path.split(inspect.getfile(
                inspect.currentframe()))[0],"plugins")))
        
        if plugin_folder not in sys.path:
            sys.path.insert(0, plugin_folder)
        
        plugins = plugins.split(' ')
      
        try:
            for plugin in plugins:
                module = __import__(plugin)
                plugin_class = getattr(module, plugin)
                plugin_inst = plugin_class()
                plugin_inst.run()
        except ImportError:
            print "Can't run " + plugin + " plugin"
            sys.exit(0)

    def get_tracks(self, title):
        artist = ''
      
        try:
            if self.delimiter in title:
                artist, title = title.split(self.delimiter)
            # Remove leading whitespaces and convert to lower case
            title = " ".join(title.split()).lower()
            artist = " ".join(artist.split()).lower()
        except Exception:
            print("Please either only specify a title or separate the artist"
                    " from the title with a '" + self.delimiter + "'")
            sys.exit(0)

        if artist == '':
            tracks = [track for track in self.library if
                (title in track['title'].lower()) or
                (title in track['album'].lower()) or
                (title in track['artist'].lower())]
        else:
            tracks = [track for track in self.library if
                ((title in track['title'].lower()) or
                (title in track['album'].lower())) and
                (artist in track['artist'].lower())]
        return tracks

    def play(self, title):
        tracks = self.get_tracks(title)
       
        for track in tracks: 
            try:
                stream_url = self.api.get_stream_url(track['id'])
            except IndexError:
                print("Can't find track (use --nocache if you are "
                        "sure the track exists)")
                sys.exit(0)

            # Just call mplayer, and when 'Enter' or 'Ctrl+C' is pressed close
            # the program
            try:
                print("Now playing " + track['artist'] + " - " + track['title'])
                with open(os.devnull, 'w') as temp:
                    proc = subprocess.call(["mplayer", "-ao", \
                            self.sound_dev, "%s" % stream_url],
                            stdout=temp, stderr=temp)
            except KeyboardInterrupt:
                break

    def search(self, search):
        search = search.lower()
        tracks  = [track for track in self.library if
                (search in track['title'].lower()) or
                (search in track['album'].lower()) or
                (search in track['artist'].lower())]
        
        if tracks:
            for track in tracks:
                sys.stdout.write(track["artist"] + " | " + track["title"] + "\n")
        else:
            print("Can't find any track (use --sync option to update the local "
                    "library before searching)")
            sys.exit(0)

def main():
    # Define the different command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('keyword', metavar='<play|search>', type=str)
    parser.add_argument('track', type=str,
            help=("specify track title to play"))
    parser.add_argument('-s', '--sync', action='store_true',  
            help=("sync the local library with the online mediathek"))
    parser.add_argument('-l','--loop', metavar='<track|album|artist>',
            help=("specify loop type, values are: track, album, artist"))
    parser.add_argument('-d','--delimiter',
            help=("specify the delitmiter that separates the artist from the"
            " track title (e.g. '//' or '-', default: '|')"))
    parser.add_argument('-a', '--audio',
            help=("specify sound device (default: 'alsa:device=hw=0.0')"))
    parser.add_argument('-p', '--plugins',
            help=("specify list of plugins to load (e.g. 'mediakeys, lastfm')"))

    args = parser.parse_args()

    # Throw away the local library if sync parameter given...
    if args.sync:
        try:
            local_library = os.path.expanduser("~/.gpm/library.db")
            os.remove(local_library)
        except OSError:
            pass

    #Initialize local mediathek
    gpm = GPM()

    
    if args.delimiter:
        gpm.delimiter = args.delimiter
    if args.audio:
        gpm.sound_dev = args.audio
    if args.plugins:
        gpm.load_plugins(args.plugins)

    if args.keyword == "search":
        gpm.search(args.track)
    elif args.keyword == "play":
        gpm.play(args.track)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
